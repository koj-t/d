if has('vim_starting')
    if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
        echo "install neobundle..."
        " vim からコマンド呼び出している neobundle.vim
        :call system("curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh > ~/install.sh")
        :call system("sh ~/install.sh; rm -rf ~/install.sh")
    endif
    set runtimepath+=~/.vim/bundle/neobundle.vim
    call neobundle#begin(expand('~/.vim/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundleCheck

" originalrepos on github
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \ 'windows' : 'make -f make_mingw32.mak',
            \ 'cygwin' : 'make -f make_cygwin.mak',
            \ 'mac' : 'make -f make_mac.mak',
            \ 'unix' : 'make -f make_unix.mak',
            \ },}
NeoBundle 'VimClojure'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'Shougo/neoyank.vim'
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'scrooloose/syntastic'
let g:syntastic_check_on_open=0 "ファイルを開いたときはチェックしない
let g:syntastic_check_on_save=1 "保存時にはチェック
let g:syntastic_check_on_wq = 0 " wqではチェックしない
let g:syntastic_auto_loc_list=1 "エラーがあったら自動でロケーションリストを開く
let g:syntastic_cpp_check_header = 1

NeoBundle 'klen/python-mode'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Markdown'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'othree/html5.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'othree/javascript-libraries-syntax.vim'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'rbtnn/winime.vim'
NeoBundle 'Townk/vim-autoclose'
NeoBundle 'tyru/caw.vim.git'

NeoBundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_do_mapping = 0 "Disable default mappings
nmap s <Plug>(easymotion-s2)

"--------------------------------------------------------------------------
" NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neocomplete.vim'
" neocomplete
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

"--------------------------------------------------------------------------
"------------------------------------------------------------
NeoBundle "davidhalter/jedi-vim"
" jedi-vim Setting
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#auto_vim_configuration = 0
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
"------------------------------------------------------------

NeoBundle 'myhere/vim-nodejs-complete'
:setl omnifunc=jscomplete#CompleteJS
if !exists('g:neocomplete_omni_functions')
  let g:neocomplete_omni_functions = {}
endif
let g:neocomplete_omni_functions.javascript = 'nodejscomplete#CompleteJS'
let g:node_usejscomplete = 1


NeoBundle 'nikvdp/ejs-syntax'
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript']}}

autocmd BufNewFile,BufRead *.ejs set filetype=ejs
autocmd BufNewFile,BufRead *._ejs set filetype=ejs

function! s:DetectEjs()
    if getline(1) =~ '^#!.*\<ejs\>'
        set filetype=ejs
    endif
endfunction

autocmd BufNewFile,BufRead * call s:DetectEjs()

NeoBundle 'honza/snipmate-snippets'

"Color Scheme------------------------------------
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'tomasr/molokai'
NeoBundle 'tpope/vim-vividchalk'
NeoBundle 'Lokaltog/vim-distinguished'
NeoBundle 'desert256.vim'
let g:solarized_termtrans=1
"------------------------------------------------
call neobundle#end()

colorscheme desert

let g:quickrun_config = {}
let g:quickrun_config['markdown'] = {
            \   'outputter': 'browser'
            \ }
set splitright
"            \   'outputter/buffer/split':'vertical'
"            \ }
let g:quickrun_config['html'] = { 'command' : 'open', 'exec' : '%c %s', 'outputter': 'browser' }

"quickrunの実行ショートカット
nnoremap <silent> qq :QuickRun<CR>

filetype plugin indent on     " required!
filetype indent on

" Comment
nmap <C-@> <Plug>(caw:hatpos:toggle)
vmap <C-@> <Plug>(caw:hatpos:toggle)

" neosnippet
" Plugin key-mappings.
imap <C-i>     <Plug>(neosnippet_expand_or_jump)
smap <C-i>     <Plug>(neosnippet_expand_or_jump)
imap kk <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Unite
let g:unite_enable_start_insert = 0
nnoremap [unite]    <Nop>
nmap     <silent><Space>u [unite]
nnoremap <silent> [unite]c   :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]b   :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f   :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
nnoremap <silent> [unite]n   :<C-u>UniteWithBufferDir file/new<CR>
" nnoremap <silent> <Space>p   :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Space>p   :<C-u>Unite -buffer-name=yank history/yank<CR>

nnoremap <silent> ,g :<C-u>Unite grep -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer<CR>
nnoremap <silent> ,c :<C-u>Unite grep  -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer -input=<C-R><C-W><CR>
vnoremap <silent> ,c "zy::<C-u>Unite grep  -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer -input=<C-R>z<CR>
nnoremap <silent> ,rg :<C-u>UniteResume search-buffer<CR>

nnoremap <silent><Space>v :VimFiler -split -simple -winwidth=30 -no-quit<CR>
nnoremap <silent><Space>V :VimFiler<CR>
let g:vimfiler_as_default_explorer = 1
nnoremap <silent><Space>, 'A

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --hidden'
    let g:unite_source_grep_recursive_opt = ''
endif

autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-", " proprietary attribute \"uib-", " proprietary attribute \"pattern"]
