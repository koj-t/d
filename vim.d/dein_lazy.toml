[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("nvim")'
hook_post_source = '''
    call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_post_source = '''
    let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1
hook_add = '''
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  " return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
  " neosnippet
  " Plugin key-mappings.
  imap <C-i>     <Plug>(neosnippet_expand_or_jump)
  smap <C-i>     <Plug>(neosnippet_expand_or_jump)
  imap kk <Plug>(neosnippet_expand_or_jump)
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  let g:neosnippet#snippets_directory='~/.local/share/dein/repos/github.com/Shougo/neosnippet-snippets'
  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
  autocmd FileType python setlocal completeopt-=preview
  autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#popup_select_first = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
'''

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'vim-scripts/Markdown'
on_ft = 'markdown'

[[plugins]]
repo   = 'Shougo/unite.vim'
hook_add = '''
" Unite
let g:unite_enable_start_insert = 0
nnoremap [unite]    <Nop>
nmap     <silent><Space>u [unite]
nnoremap <silent> [unite]c   :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]b   :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f   :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
nnoremap <silent> [unite]n   :<C-u>UniteWithBufferDir file/new<CR>
nnoremap <silent> <Space>p   :<C-u>Unite -buffer-name=register register<CR>

nnoremap <silent> ,g :<C-u>Unite grep -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer<CR>
nnoremap <silent> ,c :<C-u>Unite grep  -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer -input=<C-R><C-W><CR>
vnoremap <silent> ,c "zy::<C-u>Unite grep  -auto-preview -winheight=10 -previewheight=8 -buffer-name=search-buffer -input=<C-R>z<CR>
nnoremap <silent> ,rg :<C-u>UniteResume search-buffer<CR>

if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --hidden'
    let g:unite_source_grep_recursive_opt = ''
endif
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]] # ファイルエクスプローラ
repo = 'Shougo/vimfiler.vim'
hook_add = '''
    nnoremap <silent><Space>v :VimFiler -split -simple -winwidth=30 -no-quit<CR>
    nnoremap <silent><Space>V :VimFiler<CR>
    let g:vimfiler_as_default_explorer = 1
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

